{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","images","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","loader","toggleLoader","_React$useState3","_React$useState4","index","_React$useState5","_React$useState6","_React$useState7","_React$useState8","refresh","setRefresh","react_default","a","createElement","className","style","marginBottom","href","onClick","setTimeout","react_jimage","image","preloader","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gKCOlCC,EAAS,CACb,kCACA,sPACA,gMAmDaC,MA/Cf,WAAe,IAAAC,EAEoBC,IAAMC,UAAS,GAFnCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAELM,EAFKH,EAAA,GAEGI,EAFHJ,EAAA,GAAAK,EAGeP,IAAMC,SAAS,GAH9BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGLE,EAHKD,EAAA,GAAAE,GAAAF,EAAA,GAIaR,IAAMC,SAAS,KAJ5BU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAAAE,GAAAD,EAAA,GAAAA,EAAA,GAKmBX,IAAMC,UAAS,IALlCY,EAAAV,OAAAC,EAAA,EAAAD,CAAAS,EAAA,GAKLE,EALKD,EAAA,GAKIE,EALJF,EAAA,GAqBb,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,kDAEAF,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACC,aAAc,KACzBL,EAAAC,EAAAC,cAAA,SAAIb,EAAS,cAAgB,kBAD/B,QAEEW,EAAAC,EAAAC,cAAA,KAAGI,KAAK,eAAeC,QAtBR,WACnBR,GAAW,GACXT,GAAcD,GACdmB,WAAW,WACTT,GAAW,IACV,OAiBC,WAGFC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXL,EAAU,KAAOE,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,MAAO7B,EAAOY,GAAQkB,UAC9CtB,EACEW,EAAAC,EAAAC,cAAA,8CACA,QAINF,EAAAC,EAAAC,cAAA,sDAA6CF,EAAAC,EAAAC,cAAA,WAC7CF,EAAAC,EAAAC,cAAA,0BADA,gCAEAF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,aC5CQU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.21e0cd36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Image from 'react-jimage'\n// import Image from './components/Imager'\n\nconst images = [\n  'https://i.imgur.com/KLSeYst.jpg',\n  'https://o.aolcdn.com/images/dims?quality=85&image_uri=https%3A%2F%2Fs.aolcdn.com%2Fhss%2Fstorage%2Fmidas%2Ff9a826432b80d8944e724cd6e2df38ec%2F206210712%2Fgamingtv-ed.jpg&client=amp-blogside-v2&signature=d4a1f59340256526f68e0433cd9af59e28b53b32',\n  'https://cdn.vox-cdn.com/thumbor/ix4uTa1lYoJKRH0XCG5Rl-yRQrQ=/0x0:1600x900/1200x800/filters:focal(672x322:928x578)/cdn.vox-cdn.com/uploads/chorus_image/image/63897928/ps4_controller_8.0.jpg'\n]\n\n\nfunction App() {\n\n  const [ loader, toggleLoader ] = React.useState(true)\n  const [ index, setIndex ] = React.useState(0)\n  const [ code, setCode ] = React.useState('')\n  const [ refresh, setRefresh ] = React.useState(false)\n\n  const handleToggle = () => {\n    setRefresh(true)\n    toggleLoader(!loader)\n    setTimeout(() => {\n      setRefresh(false)\n    }, 200)\n  }\n\n  // React.useEffect(() => {\n  //   setTimeout(() => {\n  //     setIndex(index+1 === images.length ? 0 : index+1)\n  //   },5000)\n  // },[ index ])\n\n  return (\n    <div className=\"App\">\n\n      <h1>React JiMage</h1>\n      <p>pan and zoom images in the container.</p>\n\n      <div style={{marginBottom: 21}}>\n        <b>{loader ? 'with loader' : 'without loader'}</b> &nbsp;\n        <a href=\"javascript:;\" onClick={handleToggle}>Toggle</a>\n      </div>\n\n      <div className=\"container\">\n        { refresh ? null : <Image image={images[index]} preloader={\n          loader ?\n            <i>Loading... Styling is up to you..</i> :\n            null\n        } /> }\n      </div>\n\n      <p>zoom with mousewheel, pan with your mouse.<br />\n      <b>Touch-enabled</b> for drag and pinch gesture.</p>\n      <br /><br />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}